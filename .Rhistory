latitude < 50)
# Lignes où 'mag', 'latitude', ou 'longitude' contiennent des NA
missing_data <- data %>%
filter(is.na(mag) | is.na(latitude) | is.na(longitude))
# Aperçu des lignes
head(missing_data)
# Nombre total de NA dans l'ensemble des données
sum(is.na(data))
# Nombre de NA par colonne
colSums(is.na(data))
# Nombre de lignes avec au moins un NA
sum(!complete.cases(data))
# Suppression de la colonne horizontalError
data_cleaned <- data %>% select(-horizontalError)
# Remplacer les NA dans 'dmin', 'magError', et 'magNst' par leur médiane
data$dmin[is.na(data$dmin)] <- median(data$dmin, na.rm = TRUE)
data$magError[is.na(data$magError)] <- median(data$magError, na.rm = TRUE)
data$magNst[is.na(data$magNst)] <- median(data$magNst, na.rm = TRUE)
# Vérifier l'absence de NA dans les données
sum(is.na(data))  # Devrait être 0
# Vérifier par colonne
colSums(is.na(data))
#Concernant la profondeur, elle ne peux pas être négative :Remplacer les valeurs négatives de profondeur par 0
#data$depth[data$depth < 0] <- 0
# Vérifier les statistiques de profondeur après traitement
summary(data$depth)
ui <- fluidPage(
titlePanel("Analyse Interactive des Séismes aux États-Unis"),
sidebarLayout(
sidebarPanel(
sliderInput("radius", "Taille des points", min = 1, max = 10, value = 3),
sliderInput("magnitude", "Filtrer par magnitude :",
min = 1, max = 6, value = c(2, 5)),
sliderInput("depth", "Filtrer par profondeur :",
min = 0, max = 150, value = c(0, 50)),
actionButton("reset", "Réinitialiser les filtres"),
downloadButton("downloadData", "Télécharger les données filtrées")
),
mainPanel(
tabsetPanel(
# Onglet Carte et Tableau
tabPanel("Carte et Tableau",
leafletOutput("map", height = 400),
DTOutput("table")
),
# Graphique temporel
tabPanel("Graphique temporel",
plotlyOutput("time_series")
),
# Distribution des magnitudes
tabPanel("Distribution des Magnitudes",
plotlyOutput("magnitude_distribution")
),
# Répartition géographique par profondeur
tabPanel("Répartition par Profondeur",
plotlyOutput("depth_scatter")
),
# Comparaison régionale
tabPanel("Comparaison Régionale",
plotlyOutput("regional_comparison")
),
# Proportions des types de séismes
tabPanel("Proportions des Types de Séismes",
plotlyOutput("type_pie_chart")
),
# Corrélation magnitude vs profondeur
tabPanel("Magnitude vs Profondeur",
plotlyOutput("magnitude_depth_correlation")
)
)
)
)
)
server <- function(input, output, session) {
# Données filtrées en fonction des sliders
selected_data <- reactive({
data %>%
filter(
mag >= input$magnitude[1],
mag <= input$magnitude[2],
depth >= input$depth[1],
depth <= input$depth[2]
)
})
# Carte interactive
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = -98, lat = 40, zoom = 4)
})
observe({
leafletProxy("map", data = selected_data()) %>%
clearMarkers() %>%
addCircleMarkers(
~longitude, ~latitude,
radius = ~mag * input$radius / 2,
color = ~colorNumeric("Reds", domain = data$mag)(mag),
stroke = FALSE,
fillOpacity = 1,
popup = ~paste(
"Lieu :", place, "<br>",
"Magnitude :", mag, "<br>",
"Profondeur :", depth, "km"
)
)
})
# Tableau interactif
output$table <- renderDT({
datatable(selected_data()[, c("time", "latitude", "longitude", "mag", "depth")],
options = list(pageLength = 10), selection = "single")
})
# Graphique temporel
output$time_series <- renderPlotly({
data %>%
mutate(date = as.Date(time)) %>%
group_by(date) %>%
summarise(
Total_Séismes = n(),
Magnitude_Moyenne = mean(mag, na.rm = TRUE)
) %>%
plot_ly(x = ~date, y = ~Total_Séismes, type = 'scatter', mode = 'lines', name = "Nombre de séismes", line = list(color = "blue")) %>%
add_trace(y = ~Magnitude_Moyenne, name = "Magnitude moyenne", yaxis = "y2", line = list(color = "red")) %>%
layout(
title = "Évolution des séismes dans le temps",
xaxis = list(title = "Date"),
yaxis = list(title = "Nombre de séismes"),
yaxis2 = list(overlaying = "y", side = "right", title = "Magnitude moyenne"),
legend = list(orientation = "h")
)
})
# Distribution des magnitudes
output$magnitude_distribution <- renderPlotly({
data %>%
plot_ly(x = ~mag, type = "histogram", nbinsx = 20) %>%
layout(
title = "Répartition des Magnitudes",
xaxis = list(title = "Magnitude"),
yaxis = list(title = "Nombre de Séismes")
)
})
# Répartition géographique par profondeur
output$depth_scatter <- renderPlotly({
data %>%
plot_ly(
x = ~longitude,
y = ~latitude,
color = ~depth,
colors = scales::viridis_pal()(100),  # Utilisation de Viridis via scales
size = ~mag,
type = "scatter",
mode = "markers"
) %>%
layout(
title = "Répartition Géographique par Profondeur",
xaxis = list(title = "Longitude"),
yaxis = list(title = "Latitude"),
coloraxis = list(colorbar = list(title = "Profondeur (km)"))
)
})
# Comparaison régionale
output$regional_comparison <- renderPlotly({
data %>%
mutate(region = case_when(
longitude < -115 ~ "Ouest",
longitude >= -115 & longitude < -100 ~ "Centre",
TRUE ~ "Est"
)) %>%
mutate(date = as.Date(time)) %>%
group_by(region, date) %>%
summarise(n = n(), .groups = "drop") %>%
plot_ly(
x = ~date,
y = ~n,
color = ~region,
type = "bar"
) %>%
layout(
title = "Comparaison des Séismes par Région",
xaxis = list(title = "Date"),
yaxis = list(title = "Nombre de Séismes"),
barmode = "stack"
)
})
# Proportions des types de séismes
output$type_pie_chart <- renderPlotly({
data %>%
count(type) %>%
plot_ly(labels = ~type, values = ~n, type = "pie") %>%
layout(
title = "Proportions des Types de Séismes"
)
})
# Corrélation magnitude vs profondeur
output$magnitude_depth_correlation <- renderPlotly({
data %>%
plot_ly(
x = ~depth,
y = ~mag,
type = "scatter",
mode = "markers",
color = ~mag,
colors = "Blues"
) %>%
layout(
title = "Corrélation entre Magnitude et Profondeur",
xaxis = list(title = "Profondeur (km)"),
yaxis = list(title = "Magnitude")
)
})
# Télécharger les données
output$downloadData <- downloadHandler(
filename = function() {
paste("seismes_filtres_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(selected_data(), file, row.names = FALSE)
}
)
# Réinitialisation des filtres et du tableau
proxy <- dataTableProxy("table")
observeEvent(input$reset, {
updateSliderInput(session, "magnitude", value = c(2, 5))
updateSliderInput(session, "depth", value = c(0, 50))
selectRows(proxy, NULL)
})
}
# Lancement de l'application
shinyApp(ui = ui, server = server)
# Lancement de l'application
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# Données filtrées en fonction des sliders
selected_data <- reactive({
data %>%
filter(
mag >= input$magnitude[1],
mag <= input$magnitude[2],
depth >= input$depth[1],
depth <= input$depth[2]
)
})
# Données pour la ligne sélectionnée dans le tableau
selected_row <- reactive({
if (!is.null(input$table_rows_selected)) {
selected_data()[input$table_rows_selected, ]  # Ligne sélectionnée
} else {
selected_data()  # Si aucune sélection, toutes les données filtrées
}
})
# Carte interactive initiale
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = -98, lat = 40, zoom = 4)
})
# Mise à jour de la carte
observe({
# Si une ligne est sélectionnée
if (!is.null(input$table_rows_selected)) {
# Afficher uniquement le séisme sélectionné
leafletProxy("map") %>%
clearMarkers() %>%
addCircleMarkers(
data = selected_row(),
~longitude, ~latitude,
radius = ~mag * input$radius / 2,
color = "blue",  # Couleur spécifique pour le séisme sélectionné
stroke = TRUE,
fillOpacity = 1,
popup = ~paste(
"Lieu :", place, "<br>",
"Magnitude :", mag, "<br>",
"Profondeur :", depth, "km"
)
)
} else {
# Afficher tous les séismes filtrés
leafletProxy("map", data = selected_data()) %>%
clearMarkers() %>%
addCircleMarkers(
~longitude, ~latitude,
radius = ~mag * input$radius / 2,
color = ~colorNumeric("Reds", domain = data$mag)(mag),
stroke = FALSE,
fillOpacity = 1,
popup = ~paste(
"Lieu :", place, "<br>",
"Magnitude :", mag, "<br>",
"Profondeur :", depth, "km"
)
)
}
})
# Tableau interactif
output$table <- renderDT({
datatable(selected_data()[, c("time", "latitude", "longitude", "mag", "depth")],
options = list(pageLength = 10),
selection = "single")
})
# Réinitialisation des filtres et du tableau
proxy <- dataTableProxy("table")
observeEvent(input$reset, {
updateSliderInput(session, "magnitude", value = c(2, 5))
updateSliderInput(session, "depth", value = c(0, 50))
selectRows(proxy, NULL)  # Réinitialiser la sélection du tableau
})
}
# Lancement de l'application
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# Données filtrées en fonction des sliders
selected_data <- reactive({
data %>%
filter(
mag >= input$magnitude[1],
mag <= input$magnitude[2],
depth >= input$depth[1],
depth <= input$depth[2]
)
})
# Données pour la ligne sélectionnée dans le tableau
selected_row <- reactive({
if (!is.null(input$table_rows_selected)) {
selected_data()[input$table_rows_selected, ]  # Ligne sélectionnée
} else {
selected_data()  # Si aucune sélection, toutes les données filtrées
}
})
# Carte interactive initiale
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = -98, lat = 40, zoom = 4)
})
# Mise à jour de la carte
observe({
# Si une ligne est sélectionnée
if (!is.null(input$table_rows_selected)) {
# Afficher uniquement le séisme sélectionné
leafletProxy("map") %>%
clearMarkers() %>%
addCircleMarkers(
data = selected_row(),
~longitude, ~latitude,
radius = ~mag * input$radius / 2,
color = "blue",  # Couleur spécifique pour le séisme sélectionné
stroke = TRUE,
fillOpacity = 1,
popup = ~paste(
"Lieu :", place, "<br>",
"Magnitude :", mag, "<br>",
"Profondeur :", depth, "km"
)
)
} else {
# Afficher tous les séismes filtrés
leafletProxy("map", data = selected_data()) %>%
clearMarkers() %>%
addCircleMarkers(
~longitude, ~latitude,
radius = ~mag * input$radius / 2,
color = ~colorNumeric("Reds", domain = data$mag)(mag),
stroke = FALSE,
fillOpacity = 1,
popup = ~paste(
"Lieu :", place, "<br>",
"Magnitude :", mag, "<br>",
"Profondeur :", depth, "km"
)
)
}
})
# Tableau interactif
output$table <- renderDT({
datatable(selected_data()[, c("time", "latitude", "longitude", "mag", "depth")],
options = list(pageLength = 10),
selection = "single")
})
# Réinitialisation des filtres et du tableau
proxy <- dataTableProxy("table")
observeEvent(input$reset, {
updateSliderInput(session, "magnitude", value = c(2, 5))
updateSliderInput(session, "depth", value = c(0, 50))
selectRows(proxy, NULL)  # Réinitialiser la sélection du tableau
})
# Graphique temporel
output$time_series <- renderPlotly({
data %>%
mutate(date = as.Date(time)) %>%
group_by(date) %>%
summarise(
Total_Séismes = n(),
Magnitude_Moyenne = mean(mag, na.rm = TRUE)
) %>%
plot_ly(x = ~date, y = ~Total_Séismes, type = 'scatter', mode = 'lines', name = "Nombre de séismes", line = list(color = "blue")) %>%
add_trace(y = ~Magnitude_Moyenne, name = "Magnitude moyenne", yaxis = "y2", line = list(color = "red")) %>%
layout(
title = "Évolution des séismes dans le temps",
xaxis = list(title = "Date"),
yaxis = list(title = "Nombre de séismes"),
yaxis2 = list(overlaying = "y", side = "right", title = "Magnitude moyenne"),
legend = list(orientation = "h")
)
})
# Distribution des magnitudes
output$magnitude_distribution <- renderPlotly({
data %>%
plot_ly(x = ~mag, type = "histogram", nbinsx = 20) %>%
layout(
title = "Répartition des Magnitudes",
xaxis = list(title = "Magnitude"),
yaxis = list(title = "Nombre de Séismes")
)
})
# Répartition géographique par profondeur
output$depth_scatter <- renderPlotly({
data %>%
plot_ly(
x = ~longitude,
y = ~latitude,
color = ~depth,
colors = scales::viridis_pal()(100),  # Utilisation de Viridis via scales
size = ~mag,
type = "scatter",
mode = "markers"
) %>%
layout(
title = "Répartition Géographique par Profondeur",
xaxis = list(title = "Longitude"),
yaxis = list(title = "Latitude"),
coloraxis = list(colorbar = list(title = "Profondeur (km)"))
)
})
# Comparaison régionale
output$regional_comparison <- renderPlotly({
data %>%
mutate(region = case_when(
longitude < -115 ~ "Ouest",
longitude >= -115 & longitude < -100 ~ "Centre",
TRUE ~ "Est"
)) %>%
mutate(date = as.Date(time)) %>%
group_by(region, date) %>%
summarise(n = n(), .groups = "drop") %>%
plot_ly(
x = ~date,
y = ~n,
color = ~region,
type = "bar"
) %>%
layout(
title = "Comparaison des Séismes par Région",
xaxis = list(title = "Date"),
yaxis = list(title = "Nombre de Séismes"),
barmode = "stack"
)
})
# Proportions des types de séismes
output$type_pie_chart <- renderPlotly({
data %>%
count(type) %>%
plot_ly(labels = ~type, values = ~n, type = "pie") %>%
layout(
title = "Proportions des Types de Séismes"
)
})
# Corrélation magnitude vs profondeur
output$magnitude_depth_correlation <- renderPlotly({
data %>%
plot_ly(
x = ~depth,
y = ~mag,
type = "scatter",
mode = "markers",
color = ~mag,
colors = "Blues"
) %>%
layout(
title = "Corrélation entre Magnitude et Profondeur",
xaxis = list(title = "Profondeur (km)"),
yaxis = list(title = "Magnitude")
)
})
# Télécharger les données
output$downloadData <- downloadHandler(
filename = function() {
paste("seismes_filtres_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(selected_data(), file, row.names = FALSE)
}
)
# Réinitialisation des filtres et du tableau
proxy <- dataTableProxy("table")
observeEvent(input$reset, {
updateSliderInput(session, "magnitude", value = c(2, 5))
updateSliderInput(session, "depth", value = c(0, 50))
selectRows(proxy, NULL)
})
}
# Lancement de l'application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(ggplot2)
library(dplyr)
library(lubridate)
library(plotly)
library(DT)  #tableau interactif
library(flexdashboard)
getwd()
setwd("/Users/constance/Documents/Université/M2/S1/Projet/Data-visualisation")
